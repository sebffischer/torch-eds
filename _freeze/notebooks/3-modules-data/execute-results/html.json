{
  "hash": "aecd59d42b5e59ef3df3146c5161c3aa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modules and Data\"\n---\n\n\n\n\n\n\n# From Linear Models to Neural Networks\n\nIn the previous notebook, we explored how to use `torch`'s autograd system to fit simple linear models. We manually:\n\n1. Managed the weights.\n2. Defined the forward path for the model.\n3. Computed gradients and updated parameters using a simple update rule: `a$sub_(lr * a$grad)`\n\nFor more complex models, this approach becomes cumbersome. `torch` offers several high-level abstractions that simplify building and training neural networks:\n\n- `nn_module`: A class to organize model parameters and define the forward pass.\n- `dataset` and `dataloader`: Classes to handle data loading and batching, replacing our manual data handling.\n- `optim`: Classes that implement various optimization algorithms, replacing our manual gradient updates.\n\nLet's explore how these components work together by building a neural network to classify spiral data. Note that we only briefly touch on optimizers here and dedicate an additional notebook to them.\n\n# Neural Network Architecture with `nn_module`\n\nThe `nn_module` class serves several purposes:\n\n1. Acts as a container for learnable parameters.\n2. Provides train/eval modes, which are essential for layers like dropout and batch normalization.\n3. Defines the forward pass of the model.\n\nTorch offers many common neural network modules out of the box. For example, the simple linear model we created earlier ($\\hat{y} = ax + b$) can be constructed using the built-in `nn_linear` module:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(torch)\nlinear_model <- nn_linear(in_features = 1, out_features = 1, bias = TRUE)\nlinear_model$parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$weight\ntorch_tensor\n-0.4078\n[ CPUFloatType{1,1} ][ requires_grad = TRUE ]\n\n$bias\ntorch_tensor\n0.01 *\n 3.3125\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n```\n\n\n:::\n:::\n\n\n\nWe can perform a forward pass by simply calling the function on some inputs.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlinear_model(torch_randn(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n-0.5108\n[ CPUFloatType{1} ][ grad_fn = <ViewBackward0> ]\n```\n\n\n:::\n:::\n\n\n\nNote that while `nn_module`s behave like functions, they also maintain a *state*, primarily their parameter weights.\n\nImplementing a custom `nn_module` is straightforward and requires defining two key methods:\n\n1. `initialize`: This constructor runs when the model is created. It defines the layers and their dimensions.\n2. `forward`: This method defines how data flows through your network: it specifies the actual computation path from input to output.\n\nLet's implement a simple linear regression module ourselves.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnn_simple_linear <- nn_module(\"nn_simple_linear\",\n  initialize = function() {\n    # `self` refers to the object itself\n    self$a = nn_parameter(torch_randn(1), requires_grad = TRUE)\n    self$b = nn_parameter(torch_randn(1), requires_grad = TRUE)\n  },\n  forward = function(x) {\n    self$a * x + self$b\n  }\n)\n```\n:::\n\n\n\nNote that `nn_simple_linear` is not an `nn_module` itself but an `nn_module_generator`. To create the `nn_module`, we call it, which invokes the `$initialize()` method defined above:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsimple_linear <- nn_simple_linear()\nsimple_linear\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAn `nn_module` containing 2 parameters.\n\n── Parameters ──────────────────────────────────────────────────────────────────────────────────────────────────────────\n• a: Float [1:1]\n• b: Float [1:1]\n```\n\n\n:::\n\n```{.r .cell-code}\nsimple_linear$parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\ntorch_tensor\n 0.1123\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n\n$b\ntorch_tensor\n 0.9447\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n```\n\n\n:::\n:::\n\n\n\nFurthermore, note that we wrapped the trainable tensors in `nn_parameter()`, ensuring they are included in the `$parameters`. Only those weights that are part of the network's parameters and have `$requires_grad` set to `TRUE` will later be updated by the optimizer.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsimple_linear$parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\ntorch_tensor\n 0.1123\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n\n$b\ntorch_tensor\n 0.9447\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n```\n\n\n:::\n:::\n\n\n\nBesides parameters, neural networks can also have **buffers** (`nn_buffer`). Buffers are tensors that are part of the model's state but don't receive gradients during backpropagation.\n\nAdditionally, an `nn_module` operates in either a *train* or *eval* state:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsimple_linear$train()\nsimple_linear$training\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nsimple_linear$eval()\nsimple_linear$training\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\nSome `nn_module`s (such as batch normalization) behave differently depending on this mode, so it's essential to ensure that the network is in the correct mode during the training process.\n\nAnother important method of a network is `$state_dict()`, which returns the network's parameters and buffers.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsimple_linear$state_dict()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\ntorch_tensor\n 0.1123\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n\n$b\ntorch_tensor\n 0.9447\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n```\n\n\n:::\n:::\n\n\n\nYou can also load new parameters into a network using `$load_state_dict()`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsimple_linear$load_state_dict(list(\n  a = nn_parameter(torch_tensor(1)),\n  b = nn_parameter(torch_tensor(0))\n))\nsimple_linear$state_dict()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\ntorch_tensor\n 1\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n\n$b\ntorch_tensor\n 0\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n```\n\n\n:::\n:::\n\n\n\nThe state dict can, for example, be used to save the network's weights for later use. Note that, in general, you cannot simply save and load `torch` objects using `saveRDS` and `readRDS`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npth <- tempfile()\nsaveRDS(simple_linear$state_dict(), pth)\nreadRDS(pth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\ntorch_tensor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError in (function (self) : external pointer is not valid\n```\n\n\n:::\n:::\n\n\n\nInstead, you need to use `torch_save` and `torch_load`:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntorch_save(simple_linear$state_dict(), pth)\ntorch_load(pth)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\ntorch_tensor\n 1\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n\n$b\ntorch_tensor\n 0\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n```\n\n\n:::\n:::\n\n\n\nIt is also possible to save the entire `nn_module`.\n\nBesides adding parameters and buffers to the network's state dict by registering `nn_parameter`s and `nn_buffer`s in the module's `$initialize()` method, you can also register other `nn_module`s.\n\n## The World is Not Linear\n\nWhile we have so far explained much of `torch`'s functionality using simple linear networks, the main idea of deep learning is to model complex, non-linear relationships. Below, we generate some non-linear synthetic spiral data for binary classification:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(torch)\nlibrary(ggplot2)\nlibrary(mlbench)\n\n# Generate spiral data\nset.seed(123)\nn <- 500\nspiral <- mlbench.spirals(n, sd = 0.1)\n\n# Convert to data frame\nspiral_data <- data.frame(\n  x1 = spiral$x[,1],\n  x2 = spiral$x[,2],\n  label = as.factor(spiral$classes)\n)\n```\n:::\n\n\n\nThe data looks like this:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](3-modules-data_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nWhile linear models are often useful and have helped us explain the `torch` API, they are limited in capturing the complex, non-linear patterns commonly present in real-world data, especially unstructured types like images, text, audio, and video. Deep neural networks typically consist of many different layers (hence the name \"deep\") and combine linear and non-linear layers with various other components, allowing them to represent highly complex functions. Traditional machine learning and statistics rely on manual feature engineering to transform raw inputs, whereas deep neural networks have revolutionized this process by automatically learning hierarchical features directly from the data.\n\nOne challenging problem is defining a neural network architecture for a given task. While neural networks with a single hidden layer can theoretically approximate any continuous function, the practical challenge lies in finding these solutions efficiently. This is where architectural choices and their associated *inductive biases* become crucial.\n\nAn inductive bias represents the set of assumptions that a learning algorithm uses to predict outputs for inputs it hasn't encountered during training. These biases help the model generalize beyond its training data by favoring certain solutions over others.\n\nSome examples of inductive biases in different neural network architectures:\n\n### Convolutional Neural Networks (CNNs)\n\nThe central component of a CNN is the convolutional layer:\n\n![Convolutional Layer](../assets/convolution.png)\n\nCNNs encode several strong inductive biases about visual data:\n\n1. **Locality**: Nearby pixels are more likely to be related than distant ones.\n2. **Translation Invariance**: Features should be detected regardless of their position.\n3. **Hierarchical Composition**: Complex patterns are built from simpler ones.\n\nThese biases make CNNs particularly effective for image-related tasks because they align with our understanding of how visual information is structured.\n\nTo create a convolutional layer for a 2D image, we can use the `nn_conv2d` function.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstr(image)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFloat [1:1, 1:28, 1:28]\n```\n\n\n:::\n\n```{.r .cell-code}\nconv_layer <- nn_conv2d(in_channels = 1, out_channels = 1, kernel_size = 3, padding = 1)\nstr(conv_layer(image))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFloat [1:1, 1:28, 1:28]\n```\n\n\n:::\n:::\n\n\n\nBecause we have encoded more information about the structural relationship between the input tensor and the output tensor (the same filter is applied to the entire image), the convolutional layer has far fewer parameters than a fully connected layer.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nconv_layer$parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$weight\ntorch_tensor\n(1,1,.,.) = \n -0.1232  0.1247 -0.2829\n -0.2022 -0.1224 -0.0655\n -0.2543  0.2183 -0.0786\n[ CPUFloatType{1,1,3,3} ][ requires_grad = TRUE ]\n\n$bias\ntorch_tensor\n 0.1070\n[ CPUFloatType{1} ][ requires_grad = TRUE ]\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note}\n## Weights of a Fully Connected Layer\n\n**Question 1**: How many parameters does a fully connected layer with the same number of inputs and outputs have?\n\n<details>\n<summary>Answer</summary>\n\nThe input has $28 \\times 28 = 784$ pixels and the output as well. The weights of the fully connected layer are a $784 \\times 784$ matrix and the bias also has 784 elements, so the number of parameters is $784 \\times 784 + 784 = 615440$, much more than our simple convolutional kernel.\n\n</details>\n\n:::\n\nBelow, we show the output of the first convolutional layer from a (trained) ResNet18 model.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](3-modules-data_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Transformers\n\nWhile there are many variations of transformer architectures, the main idea is the (self-)attention mechanism:\n\n![](../assets/attention.png)\nSource: https://medium.com/@ramendrakumar/self-attention-d8196b9e9143\n\nTransformer architectures, which power language models like GPT-4 and are commonly used in natural language processing, have different inductive biases:\n\n1. **Non-locality**: Any token can directly interact with any other token (this is why training transformers is so expensive).\n2. **Position Awareness**: Sequential order matters but is explicitly encoded.\n3. **Attention-based Relationships**: Important connections between elements are learned dynamically.\n\nThese biases make Transformers well-suited for tasks where long-range dependencies are important, such as understanding language or analyzing sequences.\n\nIn `torch`, the `nn_multihead_attention` module implements the attention mechanism. We demonstrate how to use it with random data, a single output head, and self-attention for simplicity.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(torch)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(zeallot)\n\nembed_dim <- 16\nseq_length <- 10\nbatch_size <- 1\n\n# Initialize multihead attention module\nattention <- nn_multihead_attention(\n  embed_dim = embed_dim,\n  num_heads = 1\n)\n\n# Create random input embedding\ninput_embedding <- torch_randn(seq_length, batch_size, embed_dim)\n\n# For self-attention, the query, key, and value are the same\nquery <- key <- value <- input_embedding\n\n# Forward pass, keep the attention weights, not only new embeddings\noutput <- attention(query, key, value, need_weights = TRUE)\nattn_output <- output[[1L]]\nattn_weights <- output[[2L]]\n```\n:::\n\n\n\nBelow, we print the attention weights between the random embeddings and weights.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](3-modules-data_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nBelow, we show a visualization of the mechanism:\n\n![](../assets/attention2.png){width=60%}\n\nSource: https://data-science-blog.com/blog/2021/04/07/multi-head-attention-mechanism/\n\n### MLPs (like our Spiral Network)\n\nThe different layers in a Multi-Layer Perceptron (MLP) consist mainly of an affine-linear transformation followed by a non-linear function, such as a ReLU activation function:\n\n![](../assets/mlp-layer.png){width=40%}\n\nSource: https://scikit-learn.org/1.5/modules/neural_networks_supervised.html\n\nOur simple multi-layer perceptron has minimal inductive biases:\n\n1. **Continuity**: Similar inputs should produce similar outputs.\n2. **Hierarchical Feature Learning**: Each layer builds increasingly abstract representations.\n\nThis flexibility makes MLPs general-purpose learners, but they may require more data or parameters to learn patterns that specialized architectures can discover more efficiently.\n\nFor our problem, we will use a simple MLP with three hidden layers:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnn_spiral_net <- nn_module(\"nn_spiral_net\",\n  initialize = function(input_size, hidden_size, output_size) {\n    self$fc1 <- nn_linear(input_size, hidden_size)\n    self$fc2 <- nn_linear(hidden_size, hidden_size)\n    self$fc3 <- nn_linear(hidden_size, hidden_size)\n    self$fc4 <- nn_linear(hidden_size, output_size)\n    self$relu = nn_relu()\n  },\n\n  forward = function(x) {\n    x |>\n      self$fc1() |>\n      self$relu() |>\n      self$fc2() |>\n      self$relu() |>\n      self$fc3() |>\n      self$relu() |>\n      self$fc4()\n  }\n)\n```\n:::\n\n\n\n::: {.callout-tip}\nInstead of creating an `nn_relu()` during network initialization, we could have used the `nnf_relu` function directly in the forward pass. This is possible for activation functions as they have no trainable weights.\n\nIn general, `nn_` functions create module instances that can maintain state (like trainable weights or running statistics), while `nnf_` functions provide the same operations as pure functions without any state.\n\nFurthermore, for simple sequential networks, we could have used `nn_sequential` to define the network instead of `nn_module`. This allows you to chain layers together in a linear fashion without explicitly defining the forward pass.\n:::\n\nThe image below visualizes the general structure of this network:\n\n![](../assets/neural_networks-002.png){width=60%}\n\nSource: https://tikz.net/neural_networks/\n\nWe can create a concrete network by calling the resulting `nn_module_generator` and specifying the required parameters.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Create model instance\nmodel <- nn_spiral_net(\n  input_size = 2,\n  hidden_size = 64,\n  output_size = 2\n)\n\nprint(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAn `nn_module` containing 8,642 parameters.\n\n── Modules ─────────────────────────────────────────────────────────────────────────────────────────────────────────────\n• fc1: <nn_linear> #192 parameters\n• fc2: <nn_linear> #4,160 parameters\n• fc3: <nn_linear> #4,160 parameters\n• fc4: <nn_linear> #130 parameters\n• relu: <nn_relu> #0 parameters\n```\n\n\n:::\n:::\n\n\n\nAt this point, let's briefly discuss the output—the 'head' of the network, as well as loss functions.\n\n**Classification**\n\nThe output dimension of a classification network is usually the number of classes, which is 2 in our case. However, the output is not probabilities but logit scores. To convert a vector of scores to probabilities, we apply the softmax function:\n\n$$ \\text{softmax}(x) = \\frac{\\exp(x)}{\\sum_i \\exp(x_i)} $$\n\nIn `torch`, we can apply the softmax function using `nnf_softmax()`, specifying the dimension along which to apply softmax.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlogits <- model(torch_randn(2, 2))\nprint(logits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n0.01 *\n 9.6994  3.6723\n  9.8986  2.9452\n[ CPUFloatType{2,2} ][ grad_fn = <AddmmBackward0> ]\n```\n\n\n:::\n\n```{.r .cell-code}\n# dim = 2 applies softmax along the class dimension (columns)\nnnf_softmax(logits, dim = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n 0.5151  0.4849\n 0.5174  0.4826\n[ CPUFloatType{2,2} ][ grad_fn = <SoftmaxBackward0> ]\n```\n\n\n:::\n:::\n\n\n\nThe most commonly used loss function is cross-entropy. For a true probability vector $p$ and a predicted probability vector $q$, the cross-entropy is defined as:\n\n$$ \\text{CE}(p, q) = - \\sum_i p_i \\log(q_i) $$\n\nNote that when the true probability $p$ is 1 for the true class and 0 for all other classes, the cross-entropy simplifies to:\n\n$$ \\text{CE}(p, q) = - \\log(q_{y}) $$\n\nwhere $y$ is the true class and $q_y$ is its predicted probability.\n\nTo calculate the cross-entropy loss, we need to pass the predicted scores and the true class indices to the loss function. The classes should be labeled from `1` to `C` for a total of `C` classes.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ny_true <- torch_tensor(c(1, 2), dtype = torch_long())\ndim(logits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(y_true)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nnnf_cross_entropy(input = logits, target = y_true)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n0.695992\n[ CPUFloatType{} ][ grad_fn = <NllLossBackward0> ]\n```\n\n\n:::\n:::\n\n\n\n**Regression**\n\nFor regression tasks, the final layer is almost always a simple linear layer with a single output. We can construct a version of the spiral network for regression by changing the final layer to a linear layer with a single output:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel_regr <- nn_spiral_net(input_size = 2, hidden_size = 64, output_size = 1)\nx <- torch_randn(1, 2)\ny_hat <- model_regr(x)\ny <- torch_randn(1)\n```\n:::\n\n\n\nThe loss function typically used is the mean squared error, defined as:\n\n$$ \\text{MSE}(y, \\hat{y}) = \\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 $$\n\nIn `torch`, we can apply the mean squared error loss using `nnf_mse_loss()`, or construct an MSE module:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmse <- nn_mse_loss()\nmse(y_hat, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using a target size (1) that is different to the input size (1,1).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n0.559677\n[ CPUFloatType{} ][ grad_fn = <MseLossBackward0> ]\n```\n\n\n:::\n\n```{.r .cell-code}\nnnf_mse_loss(y_hat, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using a target size (1) that is different to the input size (1,1).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n0.559677\n[ CPUFloatType{} ][ grad_fn = <MseLossBackward0> ]\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-note}\nFinally, it's important to note that there is nothing inherently 'magical' about `nn_module`s. We could have equally implemented the same network manually ourselves:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmake_weights <- function(input_size, hidden_size, output_size) {\n  list(\n    list(\n      w = torch_randn(input_size, hidden_size),\n      b = torch_randn(hidden_size)\n    ),\n    list(\n      w = torch_randn(hidden_size, hidden_size),\n      b = torch_randn(hidden_size)\n    ),\n    list(\n      w = torch_randn(hidden_size, hidden_size),\n      b = torch_randn(hidden_size)\n    ),\n    list(\n      w = torch_randn(hidden_size, output_size),\n      b = torch_randn(output_size)\n    )\n  )\n}\n\nforward <- function(input, weights) {\n  for (layer in weights) {\n    input <- nnf_relu(input$matmul(layer$w) + layer$b)\n  }\n  input\n}\nparams <- make_weights(2, 64, 2)\nforward(x, params)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n 0  0\n[ CPUFloatType{1,2} ]\n```\n\n\n:::\n:::\n\n\n:::\n\n# Dataset and DataLoader\n\nThe `dataset` and `dataloader` classes address separate concerns:\n\n- `dataset`: Handles data storage and access to individual samples. The methods are:\n  - `.getitem()`: Returns a single sample, regardless of the retrieval method (e.g., reading from disk or fetching from a database).\n  - `.getbatch()` (optional): Returns a full batch.\n  - `.length()`: Returns the dataset size.\n\n- `dataloader`: Given a `dataset`, handles batching, shuffling, and parallel loading.\n\nWe will start by creating a custom `dataset` class for the spiral problem. In its `$initialize()` method, it expects a `data.frame` with columns `\"x1\"`, `\"x2\"`, and `\"label\"`. We then convert these to tensors and store them in the object.\n\nBelow, we implement `.getitem()`, but we could also implement `.getbatch()`, which retrieves a vector of indices. Note that implementing `.getbatch()` can offer performance benefits.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nspiral_dataset <- dataset(\n  name = \"spiral_dataset\",\n  initialize = function(data) {\n    self$x <- torch_tensor(as.matrix(data[, c(\"x1\", \"x2\")]))\n    self$y <- torch_tensor(as.integer(data$label))\n  },\n  .getitem = function(i) {\n    list(\n      x = self$x[i,],\n      y = self$y[i]\n    )\n  },\n  .length = function() {\n    self$y$size()[[1]]\n  }\n)\n```\n:::\n\n\n\n::: {.callout-tip}\nFor the spiral problem, we could have also used the `torch::tensor_dataset` class.\n:::\n\nNow that we have defined the dataset class generator, let's create training and validation datasets:\n\nTraining and validation datasets serve different purposes:\n\n- **Training data** is used to update the model's parameters and learn patterns.\n- **Validation data** helps evaluate how well the model generalizes to unseen data, detect overfitting, and guide model selection decisions.\n\nValidation in deep learning is crucial for:\n\n1. **Detecting Overfitting**: If training loss decreases but validation loss increases, the model is likely overfitting to the training data.\n2. **Model Selection**: We can use validation performance to choose the best model architecture and hyperparameters.\n3. **Early Stopping**: We can halt training when validation performance stops improving to prevent overfitting.\n\nThe validation set acts as a proxy for unseen data, providing an estimate of how well our model will generalize to new examples. It's important to keep this data separate from training to obtain an unbiased evaluation of model performance.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Split data into train and validation sets\ntrain_ids <- sample(1:500, 400)\ntrain_data <- spiral_data[train_ids,]\nvalid_data <- spiral_data[-train_ids,]\n\n# Create datasets\ntrain_dataset <- spiral_dataset(train_data)\nvalid_dataset <- spiral_dataset(valid_data)\n```\n:::\n\n\n\nWe can access individual elements via the `$.getitem()` method:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntrain_dataset$.getitem(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x\ntorch_tensor\n-0.2233\n-0.8093\n[ CPUFloatType{2} ]\n\n$y\ntorch_tensor\n1\n[ CPULongType{} ]\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Create dataloaders\ntrain_loader <- dataloader(\n  train_dataset,\n  batch_size = 64,\n  shuffle = TRUE,\n  drop_last = FALSE\n)\n\nvalid_loader <- dataloader(\n  valid_dataset,\n  batch_size = 64,\n  shuffle = FALSE,\n  drop_last = FALSE\n)\n```\n:::\n\n\n\nThe most common way to iterate over the batches of a `dataloader` is to use the `coro::loop` function, which resembles a for loop:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nn_batches <- 0\ncoro::loop(for (batch in train_loader) {\n  n_batches <- n_batches + 1\n})\nprint(head(batch$x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n-0.4731  0.2800\n 1.0512 -0.0591\n 0.6329 -0.3253\n-0.3409 -0.8487\n 0.1006 -0.2651\n-0.7637 -0.1816\n[ CPUFloatType{6,2} ]\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(batch$y))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntorch_tensor\n 1\n 1\n 2\n 1\n 2\n 1\n[ CPULongType{6} ]\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(n_batches)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\nIt is also possible to manually iterate over the batches by first creating an iterator using `torch::dataloader_make_iter()` and then calling `dataloader_next()` until `NULL` is returned, indicating that the iterator is exhausted.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\niter <- dataloader_make_iter(train_loader)\nn_batches <- 0\nwhile (!is.null(batch <<- dataloader_next(iter))) {\n  n_batches <- n_batches + 1\n}\nprint(n_batches)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n# Training Loop\n\nTo train our MLP on the data, we need to specify how the gradients will update the network parameters, which is the role of the optimizer. While we'll cover more complex optimizers in the next section, we'll use a vanilla SGD optimizer with a learning rate of `0.3` and pass it the parameters of the model we wish to optimize.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptimizer <- optim_sgd(model$parameters, lr = 0.3)\n```\n:::\n\n\n\nFor the training loop, we only need methods from the optimizer class:\n\n- The `$step()` method updates the weights based on the gradients and the optimizer configuration (e.g., the learning rate).\n- The `$zero_grad()` method sets the gradients of all parameters handled by the optimizer to 0.\n\nNow, let's put everything together:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Training settings\nn_epochs <- 50\ndevice <- if (cuda_is_available()) \"cuda\" else \"cpu\"\n\n# Move model to device\nmodel$to(device = device)\n\n# Training loop\nhistory <- list(loss = numeric(), train_acc = numeric(), valid_acc = numeric())\n\nfor(epoch in seq_len(n_epochs)) {\n  model$train()  # Set to training mode\n\n  # Training loop\n\n  train_losses <- numeric()\n  train_accs <- numeric()\n  coro::loop(for(batch in train_loader) {\n    # Move batch to device\n    x <- batch$x$to(device = device)\n    y <- batch$y$to(device = device)\n\n    # Forward pass\n    output <- model(x)\n    loss <- nnf_cross_entropy(output, y)\n\n    # Backward pass\n    optimizer$zero_grad()\n    loss$backward()\n\n    param = as_array(model$parameters[[1]])\n    optimizer$step()\n\n    # Store training losses\n    train_losses <- c(train_losses, loss$item())\n    train_accs <- c(train_accs, mean(as_array(output$argmax(dim = 2) == y)))\n  })\n\n  history$loss <- c(history$loss, mean(train_losses))\n  history$train_acc <- c(history$train_acc, mean(train_accs))\n\n  # Validation loop\n\n  # Set model to evaluation mode\n  model$eval()\n\n  valid_accs <- numeric()\n  coro::loop(for(batch in valid_loader) {\n    x <- batch$x$to(device = device)\n    y <- batch$y$to(device = device)\n    output <- with_no_grad(model(x))\n    valid_acc <- as_array(output$argmax(dim = 2) == y)\n    valid_accs = c(valid_accs, mean(valid_acc))\n  })\n\n  history$valid_acc <- c(history$valid_acc, mean(valid_accs))\n}\n```\n:::\n\n\n\nThe decision boundary plot shows how our neural network learned to separate the spiral classes, demonstrating its ability to learn non-linear patterns that a simple linear model couldn't capture.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](3-modules-data_files/figure-html/unnamed-chunk-35-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nWe can also visualize the predictions of our final network:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](3-modules-data_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nThis example demonstrates how Torch's high-level components work together to build and train neural networks:\n\n- `nn_module` manages our parameters and network architecture.\n- The `optimizer` handles parameter updates.\n- The `dataset` and `dataloader` classes work in tandem for data loading.\n- The training loop integrates everything seamlessly.\n",
    "supporting": [
      "3-modules-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}